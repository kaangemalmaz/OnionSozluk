

@if (identityService.IsLoggedIn)
{
        <span class="entry-fav @(IsFavorited ? "entry-faved" : "entry-not-faved") p-3">
            <span @onclick="( () => FavoritedClicked())">
            @FavoritedCount
            </span>
        </span>
}

// yukardaki ile aynı işlevi görür.
@*<AuthorizeView>
</AuthorizeView>*@

@code {
    [Inject]
    IIdentityService identityService { get; set; }

    [Parameter] // dışarıdan parametre almayı sağlar. Eventlerde dışarıya parametre yollamayı sağlar.
    public bool IsFavorited { get; set; }

    [Parameter]
    public Guid? EntryId { get; set; }

    [Parameter]
    public int FavoritedCount { get; set; }

    [Parameter]
    public EventCallback<FavClickedEventArgs> OnFavClicked { get; set; } // bu sadece bir parametre bu sayfa içine yenmiş

    private async Task FavoritedClicked() 
    {
        IsFavorited = !IsFavorited; // her tıklandığında aslında tersine dönecek o yüzden var.

        var eventArgs = new FavClickedEventArgs();
        eventArgs.EntryId = EntryId;
        eventArgs.IsFaved = IsFavorited;

        await OnFavClicked.InvokeAsync(eventArgs); // Parametreyi doldurup geri yolluyorsun o ana sayfadaki metodu invoke ediyor.

        StateHasChanged();
    }
}